# coding: utf-8

"""
    cifrum API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ModelsMutualFundRuInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'registration_number': 'str',
        'company_name': 'str',
        'date_start': 'datetime',
        'date_end': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'registration_number': 'registrationNumber',
        'company_name': 'companyName',
        'date_start': 'dateStart',
        'date_end': 'dateEnd'
    }

    def __init__(self, name=None, registration_number=None, company_name=None, date_start=None, date_end=None):  # noqa: E501
        """ModelsMutualFundRuInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._registration_number = None
        self._company_name = None
        self._date_start = None
        self._date_end = None
        self.discriminator = None
        self.name = name
        self.registration_number = registration_number
        self.company_name = company_name
        self.date_start = date_start
        self.date_end = date_end

    @property
    def name(self):
        """Gets the name of this ModelsMutualFundRuInfo.  # noqa: E501


        :return: The name of this ModelsMutualFundRuInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsMutualFundRuInfo.


        :param name: The name of this ModelsMutualFundRuInfo.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def registration_number(self):
        """Gets the registration_number of this ModelsMutualFundRuInfo.  # noqa: E501


        :return: The registration_number of this ModelsMutualFundRuInfo.  # noqa: E501
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this ModelsMutualFundRuInfo.


        :param registration_number: The registration_number of this ModelsMutualFundRuInfo.  # noqa: E501
        :type: str
        """
        if registration_number is None:
            raise ValueError("Invalid value for `registration_number`, must not be `None`")  # noqa: E501

        self._registration_number = registration_number

    @property
    def company_name(self):
        """Gets the company_name of this ModelsMutualFundRuInfo.  # noqa: E501


        :return: The company_name of this ModelsMutualFundRuInfo.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ModelsMutualFundRuInfo.


        :param company_name: The company_name of this ModelsMutualFundRuInfo.  # noqa: E501
        :type: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def date_start(self):
        """Gets the date_start of this ModelsMutualFundRuInfo.  # noqa: E501


        :return: The date_start of this ModelsMutualFundRuInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this ModelsMutualFundRuInfo.


        :param date_start: The date_start of this ModelsMutualFundRuInfo.  # noqa: E501
        :type: datetime
        """
        if date_start is None:
            raise ValueError("Invalid value for `date_start`, must not be `None`")  # noqa: E501

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this ModelsMutualFundRuInfo.  # noqa: E501


        :return: The date_end of this ModelsMutualFundRuInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this ModelsMutualFundRuInfo.


        :param date_end: The date_end of this ModelsMutualFundRuInfo.  # noqa: E501
        :type: datetime
        """
        if date_end is None:
            raise ValueError("Invalid value for `date_end`, must not be `None`")  # noqa: E501

        self._date_end = date_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsMutualFundRuInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsMutualFundRuInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
